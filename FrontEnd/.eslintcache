[{"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\index.js":"1","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\App.js":"2","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\reportWebVitals.js":"3","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Main.js":"4","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\ContractView.js":"5","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Login.js":"6","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\NavBar.js":"7","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\http-common.js":"8","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\NewContract.js":"9","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Test.js":"10","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\ContractList.js":"11","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\tokenService.js":"12","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\parser.js":"13","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\SelectType.js":"14","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\Attributes.js":"15","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\deploy.js":"16","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\Confirmation.js":"17","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\TerminalDisplayer.js":"18","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\FullScreenDialog.js":"19"},{"size":494,"mtime":1632089194762,"results":"20","hashOfConfig":"21"},{"size":1301,"mtime":1632089194757,"results":"22","hashOfConfig":"21"},{"size":375,"mtime":1632089194764,"results":"23","hashOfConfig":"21"},{"size":3164,"mtime":1632089194763,"results":"24","hashOfConfig":"21"},{"size":7498,"mtime":1632089194762,"results":"25","hashOfConfig":"21"},{"size":4335,"mtime":1632089194763,"results":"26","hashOfConfig":"21"},{"size":2459,"mtime":1632089194761,"results":"27","hashOfConfig":"21"},{"size":225,"mtime":1632089194765,"results":"28","hashOfConfig":"21"},{"size":7598,"mtime":1632089194763,"results":"29","hashOfConfig":"21"},{"size":1965,"mtime":1632089194764,"results":"30","hashOfConfig":"21"},{"size":2249,"mtime":1632089194760,"results":"31","hashOfConfig":"21"},{"size":431,"mtime":1632089194765,"results":"32","hashOfConfig":"21"},{"size":400,"mtime":1632089194765,"results":"33","hashOfConfig":"21"},{"size":3996,"mtime":1632089194761,"results":"34","hashOfConfig":"21"},{"size":4935,"mtime":1632089194759,"results":"35","hashOfConfig":"21"},{"size":149,"mtime":1632089194765,"results":"36","hashOfConfig":"21"},{"size":1427,"mtime":1632089194760,"results":"37","hashOfConfig":"21"},{"size":1970,"mtime":1632089194761,"results":"38","hashOfConfig":"21"},{"size":2550,"mtime":1632089194760,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"fug5zz",{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88"},"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\index.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\App.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\reportWebVitals.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Main.js",["89","90","91","92","93","94","95","96","97","98","99"],"import { useState } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport Login from \"./Login\";\r\nimport NewContract from \"./NewContract\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport http from \"../services/http-common\";\r\nimport Test from \"./Test\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TokensList from \"../components/ContractList\";\r\nimport { BrowserRouter, Redirect, Switch, Route } from \"react-router-dom\";\r\n\r\nexport default function Main() {\r\n  // TESTING\r\n  // return <Test />;\r\n  function Copyright() {\r\n    return (\r\n      <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n        {\"Copyright Â© \"}\r\n        <Link color=\"inherit\" href=\"http://localhost:3000/\">\r\n          Ethereum Token Generator\r\n        </Link>{\" \"}\r\n        {new Date().getFullYear()}\r\n        {\".\"}\r\n      </Typography>\r\n    );\r\n  }\r\n\r\n  const [showNewContracts, setshowNewContracts] = useState(false);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: \"relative\",\r\n      display: \"flex\",\r\n    },\r\n    layout: {\r\n      width: \"auto\",\r\n      marginLeft: theme.spacing(2),\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: 600,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n      },\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n      padding: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n        marginTop: theme.spacing(6),\r\n        marginBottom: theme.spacing(6),\r\n        padding: theme.spacing(3),\r\n      },\r\n    },\r\n    stepper: {\r\n      padding: theme.spacing(3, 0, 5),\r\n    },\r\n    buttons: {},\r\n    button: {\r\n      // marginTop: theme.spacing(3),\r\n      // marginLeft: theme.spacing(1),\r\n    },\r\n    addNewBtn: {\r\n      display: \"flex\",\r\n      justifyContent: \"flex-end\",\r\n      alignItems: \"right\",\r\n      marginTop: theme.spacing(3),\r\n      marginLeft: \"auto\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const mnemonic = Cookies.get(\"mnemonic\");\r\n\r\n  // if (mnemonic === undefined) return <Redirect to=\"/login\" />;\r\n  // else\r\n  return (\r\n    <>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <TokensList />\r\n          {!showNewContracts && (\r\n            <Button\r\n              variant=\"outlined\"\r\n              className={classes.addNewBtn}\r\n              onClick={() => {\r\n                setshowNewContracts(true);\r\n              }}\r\n            >\r\n              New Contract\r\n            </Button>\r\n          )}\r\n        </Paper>\r\n        {showNewContracts && (\r\n          <NewContract\r\n            handleCloseBtn={() => {\r\n              setshowNewContracts(false);\r\n            }}\r\n          />\r\n        )}\r\n      </main>\r\n      <Copyright />\r\n    </>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\ContractView.js",["100","101","102","103","104","105","106","107","108","109","110","111","112","113","114"],"import React, { useEffect, useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport tokenService from \"../services/tokenService\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Dialog from \"@mui/material/Dialog\";\r\nimport DialogActions from \"@mui/material/DialogActions\";\r\nimport DialogContent from \"@mui/material/DialogContent\";\r\nimport DialogContentText from \"@mui/material/DialogContentText\";\r\nimport DialogTitle from \"@mui/material/DialogTitle\";\r\nimport Box from \"@mui/material/Box\";\r\n\r\nimport parseArgs from \"../services/parser\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n    display: \"flex\",\r\n  },\r\n  layout: {\r\n    width: \"auto\",\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: theme.spacing(1),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 900,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {},\r\n  button: {\r\n    // marginTop: theme.spacing(3),\r\n    // marginLeft: theme.spacing(1),\r\n  },\r\n  addNewBtn: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n    alignItems: \"right\",\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: \"auto\",\r\n  },\r\n}));\r\n\r\nconst FormDialog = (props) => {\r\n  const [args, setargs] = useState([]);\r\n  const [resultFromCall, setresultFromCall] = useState(\"\");\r\n  const contractInfo = props.contractInfo;\r\n  const callMethod = (methodName, args) => {\r\n    console.log(\"calling\", methodName, \"args\", args);\r\n    const contractAddress = contractInfo.contract_address;\r\n    const tknType = contractInfo.tknType;\r\n    tokenService\r\n      .callMethod({ contractAddress, methodName, args, tknType })\r\n      .then((res) => {\r\n        console.log(\"success ==>\", res.data);\r\n        setresultFromCall(res.data);\r\n      })\r\n      .catch((err) => console.log(\"err ==<\", err));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (props.showDialog == false) return;\r\n    const parsedArgs = parseArgs(props.method);\r\n    setargs(parsedArgs);\r\n    if (parsedArgs == 0) callMethod(props.method, []);\r\n  }, [props.showDialog]);\r\n\r\n  const handleFormSubmit = (e) => {\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const data = {};\r\n    let argsStack = [];\r\n    let methodName = \"\";\r\n    for (let i = 0; i < form.elements.length - 2; i++) {\r\n      const elem = form.elements[i];\r\n      if (elem.name === \"submittedFormMethodName\") {\r\n        methodName = elem.value;\r\n        continue;\r\n      }\r\n      //   data[elem.name] = elem.value;\r\n      argsStack.push({ name: elem.name, value: elem.value });\r\n    }\r\n\r\n    callMethod(methodName, argsStack);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setresultFromCall(\"\");\r\n    props.setshowDialog(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Dialog open={props.showDialog} onClose={handleClose}>\r\n        <form onSubmit={handleFormSubmit}>\r\n          <DialogTitle>Call {props.method}</DialogTitle>\r\n          <DialogContent>\r\n            {!(args == \"\") && (\r\n              <DialogContentText>\r\n                Requires the following parameters\r\n              </DialogContentText>\r\n            )}\r\n            {args.map((arg) => (\r\n              <TextField\r\n                autoFocus\r\n                margin=\"dense\"\r\n                fullWidth\r\n                variant=\"standard\"\r\n                required\r\n                name={arg}\r\n                label={arg}\r\n                type={arg}\r\n                id={arg}\r\n              />\r\n            ))}\r\n            <input\r\n              type=\"hidden\"\r\n              name=\"submittedFormMethodName\"\r\n              value={props.method.split(\"(\")[0]}\r\n            />\r\n\r\n            <Typography variant=\"h6\" gutterBottom>\r\n              Result = {JSON.stringify(resultFromCall)}\r\n            </Typography>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose}>Cancel</Button>\r\n            <Button type=\"submit\">Call</Button>\r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst InfoRow = (props) => {\r\n  return (\r\n    <>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        {props.item}:{props.value}\r\n      </Typography>\r\n    </>\r\n  );\r\n};\r\nconst MethodCall = (props) => {\r\n  const [showDialog, setshowDialog] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => {\r\n          setshowDialog(true);\r\n        }}\r\n      >\r\n        {props.title}\r\n      </Button>\r\n      <FormDialog\r\n        showDialog={showDialog}\r\n        setshowDialog={setshowDialog}\r\n        method={props.title}\r\n        contractInfo={props.contractInfo}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default function ContractView(props) {\r\n  const classes = useStyles();\r\n  const [contractInfo, setcontractInfo] = useState({});\r\n  const [contractMethods, setcontractMethods] = useState([]);\r\n\r\n  let { blockTimeStamp } = useParams();\r\n  useEffect(() => {\r\n    tokenService\r\n      .getContractInfo({ blockTimeStamp })\r\n      .then((res) => {\r\n        console.log(\"contratc found ==>>\", res.data);\r\n        setcontractInfo(res.data);\r\n      })\r\n      .catch((err) => console.log(\"err ==<\", err));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const contractAddress = contractInfo.contract_address;\r\n    const tknType = contractInfo.tknType;\r\n    if (!contractAddress) return;\r\n    console.log(\"contreact address\", contractAddress);\r\n    tokenService\r\n      .getContractMethods({ contractAddress, tknType })\r\n      .then((res) => {\r\n        console.log(\"Methods ==>>\", res.data);\r\n        setcontractMethods(res.data);\r\n      })\r\n      .catch((err) => console.log(\"err ==<\", err));\r\n  }, [contractInfo]);\r\n\r\n  const { tknName } = contractInfo;\r\n  return (\r\n    <main className={classes.layout}>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"left\"\r\n        alignItems=\"left\"\r\n      ></Grid>\r\n      <Paper className={classes.paper}>\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Contract: {tknName}\r\n        </Typography>\r\n        <hr />\r\n        {Object.entries(contractInfo).map(([item, value]) => (\r\n          <InfoRow item={item} value={value} />\r\n        ))}\r\n\r\n        <hr />\r\n        <Typography variant=\"h4\" gutterBottom>\r\n          Available Methods:\r\n        </Typography>\r\n        <hr />\r\n        {contractMethods.map((methodName) => (\r\n          <MethodCall title={methodName} contractInfo={contractInfo} />\r\n        ))}\r\n      </Paper>\r\n    </main>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Login.js",["115","116","117","118","119"],"import * as React from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport Button from \"@mui/material/Button\";\r\nimport CssBaseline from \"@mui/material/CssBaseline\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Box from \"@mui/material/Box\";\r\nimport LockOutlinedIcon from \"@mui/icons-material/LockOutlined\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Container from \"@mui/material/Container\";\r\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\r\nimport http from \"../services/http-common.js\";\r\nimport { BrowserRouter, Redirect, Switch, Route } from \"react-router-dom\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Copyright(props) {\r\n  return (\r\n    <Typography\r\n      variant=\"body2\"\r\n      color=\"text.secondary\"\r\n      align=\"center\"\r\n      {...props}\r\n    >\r\n      {\"Copyright Â© \"}\r\n      <Link color=\"inherit\" href=\"http://localhost:3000/\">\r\n        Ethereum Token Generator\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst theme = createTheme();\r\n\r\nexport default function Login() {\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const data = new FormData(event.currentTarget);\r\n    const mnemonic = data.get(\"mnemonic\");\r\n    console.log({\r\n      mnemonic: data.get(\"mnemonic\"),\r\n    });\r\n\r\n    // pelican enable chief quality install huge pear acid speak into match river\r\n    // 0x4c0dc7A9C7ceC8C7e6B839879c01137c8b8519EF ERC20\r\n\r\n    http\r\n      .post(\"http://localhost:8080/login\", { mnemonic: mnemonic })\r\n      .then((res) => {\r\n        console.log(\"succes ==>\", res);\r\n        window.location.replace(\"/\");\r\n\r\n        // window.location.reload();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error =<\", err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Paper style={{ width: \"35%\", margin: \"auto\", padding: \"2px\" }}>\r\n        <Container component=\"main\" maxWidth=\"xs\">\r\n          <CssBaseline />\r\n          <Box\r\n            sx={{\r\n              marginTop: 8,\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <Avatar sx={{ m: 1, bgcolor: \"secondary.main\" }}>\r\n              <LockOutlinedIcon />\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign in (Rinkeby Test-Network)\r\n            </Typography>\r\n            <Box\r\n              component=\"form\"\r\n              onSubmit={handleSubmit}\r\n              noValidate\r\n              sx={{ mt: 1 }}\r\n            >\r\n              {/* <TextField\r\n              margin=\"normal\"\r\n              required\r\n              fullWidth\r\n              id=\"email\"\r\n              label=\"Email Address\"\r\n              name=\"email\"\r\n              autoComplete=\"email\"\r\n              autoFocus\r\n            /> */}\r\n              <TextField\r\n                margin=\"normal\"\r\n                required\r\n                fullWidth\r\n                name=\"mnemonic\"\r\n                label=\"mnemonic\"\r\n                type=\"mnemonic\"\r\n                id=\"mnemonic\"\r\n                autoComplete=\"current-password\"\r\n              />\r\n              <FormControlLabel\r\n                control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n                label=\"Remember me\"\r\n              />\r\n              <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                sx={{ mt: 3, mb: 2 }}\r\n              >\r\n                Sign In\r\n              </Button>\r\n              {/* <Grid container>\r\n              <Grid item xs>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  Forgot password?\r\n                </Link>\r\n              </Grid>\r\n              <Grid item>\r\n                <Link href=\"#\" variant=\"body2\">\r\n                  {\"Don't have an account? Sign Up\"}\r\n                </Link>\r\n              </Grid>\r\n            </Grid> */}\r\n            </Box>\r\n          </Box>\r\n          <Copyright sx={{ mt: 8, mb: 4 }} />\r\n        </Container>\r\n      </Paper>\r\n    </ThemeProvider>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\NavBar.js",["120","121","122"],"import { useState } from \"react\";\r\nimport Cookies from \"js-cookie\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport http from \"../services/http-common\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nexport default function NavBar(props) {\r\n  const useStyles = makeStyles((theme) => ({\r\n    appBar: {\r\n      position: \"relative\",\r\n      display: \"flex\",\r\n    },\r\n    layout: {\r\n      width: \"auto\",\r\n      marginLeft: theme.spacing(2),\r\n      marginRight: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n        width: 600,\r\n        marginLeft: \"auto\",\r\n        marginRight: \"auto\",\r\n      },\r\n    },\r\n    paper: {\r\n      marginTop: theme.spacing(3),\r\n      marginBottom: theme.spacing(3),\r\n      padding: theme.spacing(2),\r\n      [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n        marginTop: theme.spacing(6),\r\n        marginBottom: theme.spacing(6),\r\n        padding: theme.spacing(3),\r\n      },\r\n    },\r\n    stepper: {\r\n      padding: theme.spacing(3, 0, 5),\r\n    },\r\n    buttons: {},\r\n    button: {\r\n      // marginTop: theme.spacing(3),\r\n      // marginLeft: theme.spacing(1),\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n  const mnemonic = Cookies.get(\"mnemonic\");\r\n\r\n  const handleLogout = () => {\r\n    http\r\n      .post(\"http://localhost:8080/logout\", { mnemonic: mnemonic })\r\n      .then((res) => {\r\n        console.log(\"succes ==>\", res);\r\n        window.location.reload();\r\n      })\r\n      .catch((err) => {\r\n        console.log(\"error =<\", err);\r\n      });\r\n  };\r\n  return (\r\n    <>\r\n      <CssBaseline />\r\n      <AppBar position=\"absolute\" color=\"default\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <a href=\"/\" style={{ textDecoration: \"none\" }}>\r\n            <Typography variant=\"h6\" color=\"inherit\" noWrap style={{ flex: 1 }}>\r\n              Ethereum Token Generator\r\n            </Typography>\r\n          </a>\r\n          <Button\r\n            className={classes.button}\r\n            onClick={handleLogout}\r\n            style={{ marginLeft: \"auto\" }}\r\n          >\r\n            Logout\r\n          </Button>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\http-common.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\NewContract.js",["123","124","125","126","127","128"],"import React, { useState } from \"react\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Stepper from \"@material-ui/core/Stepper\";\r\nimport Step from \"@material-ui/core/Step\";\r\nimport StepLabel from \"@material-ui/core/StepLabel\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SelectType from \"../components/SelectType\";\r\nimport Attributes from \"../components/Attributes\";\r\nimport Confirmation from \"../components/Confirmation\";\r\nimport deploy from \"../services/deploy\";\r\nimport TerminalDisplayer from \"../components/TerminalDisplayer\";\r\nimport fetchStream from \"fetch-readablestream\";\r\nimport FullScreenDialog from \"../components/FullScreenDialog\";\r\nimport Cookies from \"js-cookie\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  layout: {\r\n    width: \"auto\",\r\n    marginLeft: theme.spacing(2),\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\r\n      width: 600,\r\n      marginLeft: \"auto\",\r\n      marginRight: \"auto\",\r\n    },\r\n  },\r\n  paper: {\r\n    marginTop: theme.spacing(3),\r\n    marginBottom: theme.spacing(3),\r\n    padding: theme.spacing(2),\r\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\r\n      marginTop: theme.spacing(6),\r\n      marginBottom: theme.spacing(6),\r\n      padding: theme.spacing(3),\r\n    },\r\n  },\r\n  stepper: {\r\n    padding: theme.spacing(3, 0, 5),\r\n  },\r\n  buttons: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n  closeBtn: {\r\n    display: \"flex\",\r\n    justifyContent: \"flex-start\",\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n    marginRight: \"auto\",\r\n  },\r\n  button: {\r\n    marginTop: theme.spacing(3),\r\n    marginLeft: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst steps = [\"Token Type\", \"Token Attributes\", \"Confirmation\"];\r\n\r\nfunction getStepContent(\r\n  step,\r\n  {\r\n    tknType,\r\n    settknType,\r\n    tknName,\r\n    settknName,\r\n    tknSym,\r\n    settknSym,\r\n    tknSup,\r\n    settknSup,\r\n    whiteListChecked,\r\n    setwhiteListChecked,\r\n    tkninfo,\r\n  }\r\n) {\r\n  switch (step) {\r\n    case 0:\r\n      return <SelectType tknType={tknType} setTokenType={settknType} />;\r\n    case 1:\r\n      return (\r\n        <Attributes\r\n          tknName={tknName}\r\n          settknName={settknName}\r\n          tknSym={tknSym}\r\n          settknSym={settknSym}\r\n          tknSup={tknSup}\r\n          settknSup={settknSup}\r\n          whiteListChecked={whiteListChecked}\r\n          setwhiteListChecked={setwhiteListChecked}\r\n          tknType={tknType}\r\n        />\r\n      );\r\n    case 2:\r\n      return <Confirmation tkninfo={tkninfo} />;\r\n    default:\r\n      throw new Error(\"Unknown step\");\r\n  }\r\n}\r\n\r\nexport default function NewContract(props) {\r\n  const [tknType, settknType] = useState(\"\");\r\n  const [tknName, settknName] = useState(\"\");\r\n  const [tknSym, settknSym] = useState(\"\");\r\n  const [tknSup, settknSup] = useState(\"\");\r\n  const [terminalDisplay, setterminalDisplay] = useState(\"\");\r\n  const [showTerminal, setshowTerminal] = useState(false);\r\n  const [terminalStream, setTerminalStream] = useState(0);\r\n  const [whiteListChecked, setwhiteListChecked] = useState(false);\r\n\r\n  const tkninfo = [\r\n    { name: \"Token Name\", value: tknName },\r\n    { name: \"Token Type\", value: tknType },\r\n    { name: \"Token Symbol\", value: tknSym },\r\n    { name: \"Inital Supply\", value: tknSup },\r\n    { name: \"Whitelist Enabled\", value: whiteListChecked },\r\n  ];\r\n  const stateControle = {\r\n    tknType,\r\n    settknType,\r\n    tknName,\r\n    settknName,\r\n    tknSym,\r\n    settknSym,\r\n    tknSup,\r\n    settknSup,\r\n    whiteListChecked,\r\n    setwhiteListChecked,\r\n    tkninfo,\r\n  };\r\n\r\n  const classes = useStyles();\r\n  const [activeStep, setActiveStep] = React.useState(0);\r\n\r\n  const handleNext = () => {\r\n    setActiveStep(activeStep + 1);\r\n    if (activeStep === 2) {\r\n      // deploy\r\n      //   .send({\r\n      //     tknType: tknType,\r\n      //     tknName: tknName,\r\n      //     tknSym: tknSym,\r\n      //     tknSup: tknSup,\r\n      //   })\r\n      //   .then((res) => {\r\n      //     console.log(\"success ===>\", res);\r\n      //     setTerminalStream(res.body);\r\n      //   })\r\n      //   .catch((err) => console.log(\"error ===<\", err));\r\n      console.log(\"mnemonic\", \"mnemonic=\" + Cookies.get(\"mnemonic\"));\r\n\r\n      setshowTerminal(true);\r\n      fetchStream(\"http://localhost:8080/deploy\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        mode: \"cors\",\r\n\r\n        body: JSON.stringify({\r\n          tknType: tknType,\r\n          tknName: tknName,\r\n          tknSym: tknSym,\r\n          tknSup: tknSup,\r\n          tknWL: whiteListChecked,\r\n          mnemonic: Cookies.get(\"mnemonic\"),\r\n        }),\r\n      })\r\n        .then((response) => setTerminalStream(response.body))\r\n        .then((chunks) => console.dir(chunks));\r\n    }\r\n  };\r\n\r\n  const handleBack = () => {\r\n    setActiveStep(activeStep - 1);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <main className={classes.layout}>\r\n        <Paper className={classes.paper}>\r\n          <Typography component=\"h1\" variant=\"h4\" align=\"left\">\r\n            Token Creator\r\n          </Typography>\r\n          <Stepper activeStep={activeStep} className={classes.stepper}>\r\n            {steps.map((label) => (\r\n              <Step key={label}>\r\n                <StepLabel>{label}</StepLabel>\r\n              </Step>\r\n            ))}\r\n          </Stepper>\r\n          <>\r\n            {activeStep === steps.length ? (\r\n              <>\r\n                <Typography variant=\"h5\" gutterBottom>\r\n                  Your Request is Being processed.\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\">\r\n                  See the Token info below\r\n                </Typography>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {getStepContent(activeStep, stateControle)}\r\n\r\n                <div className={classes.buttons}>\r\n                  <Button\r\n                    className={classes.closeBtn}\r\n                    onClick={props.handleCloseBtn}\r\n                  >\r\n                    Cancel\r\n                  </Button>\r\n                  {activeStep !== 0 && (\r\n                    <Button onClick={handleBack} className={classes.button}>\r\n                      Back\r\n                    </Button>\r\n                  )}\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleNext}\r\n                    className={classes.button}\r\n                  >\r\n                    {activeStep === steps.length - 1 ? \"Deploy\" : \"Next\"}\r\n                  </Button>\r\n                </div>\r\n              </>\r\n            )}\r\n          </>\r\n          {showTerminal && (\r\n            <>\r\n              <FullScreenDialog\r\n                title=\"Creating your Token...\"\r\n                openBtnText=\"Open Results\"\r\n              >\r\n                <TerminalDisplayer\r\n                  terminalStream={terminalStream}\r\n                  terminalDisplay={terminalDisplay}\r\n                  setterminalDisplay={setterminalDisplay}\r\n                />\r\n              </FullScreenDialog>\r\n            </>\r\n          )}\r\n        </Paper>\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\pages\\Test.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\ContractList.js",["129","130","131","132","133","134","135","136","137","138"],"import React, { useEffect, useState } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\nimport tokenService from \"../services/tokenService\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Tokenitem = (props) => {\r\n  const { token } = props;\r\n  const handleClick = () => {\r\n    console.log(\"clkick\");\r\n  };\r\n  return (\r\n    <>\r\n      <Button\r\n        style={{ width: \"100%\", alignItems: \"left\", justifyContent: \"left\" }}\r\n        href={props.href}\r\n      >\r\n        <h4>\r\n          {token.tknName} ({token.tknType})\r\n        </h4>\r\n      </Button>\r\n      <hr />\r\n    </>\r\n    // <Link\r\n    //   to=\"/ee\"\r\n    //   onClick={handleClick}\r\n    //   style={{\r\n    //     width: \"100%\",\r\n    //     borderStyle: \"solid\",\r\n    //     alignItems: \"left\",\r\n    //     justifyContent: \"left\",\r\n    //   }}\r\n    // >\r\n\r\n    // </Link>\r\n  );\r\n};\r\n\r\nexport default function ContractList(props) {\r\n  const [tokens, settokens] = useState([]);\r\n  useEffect(() => {\r\n    tokenService\r\n      .getUserTokenList()\r\n      .then((res) => {\r\n        console.log(\"success ==>>\", res.data);\r\n        settokens(res.data);\r\n      })\r\n      .catch((err) => console.log(\"err ==<\", err));\r\n  }, []);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        My Contracts\r\n      </Typography>\r\n\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"left\"\r\n        alignItems=\"left\"\r\n      >\r\n        {tokens.map((token) => (\r\n          <Grid>\r\n            <Tokenitem\r\n              token={token}\r\n              href={\"/ContractView/\" + token.block_timestamp}\r\n            />\r\n          </Grid>\r\n        ))}\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\tokenService.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\parser.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\SelectType.js",["139","140","141","142","143"],"import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Radio from \"@material-ui/core/Radio\";\r\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormLabel from \"@material-ui/core/FormLabel\";\r\n\r\nexport default function SelectType(props) {\r\n  const handleChange = (event) => {\r\n    props.setTokenType(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Choose the Coin Type\r\n      </Typography>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"flex-start\"\r\n        alignItems=\"stretch\"\r\n      >\r\n        <Grid>\r\n          <RadioGroup\r\n            aria-label=\"type\"\r\n            name=\"type\"\r\n            value={props.tknType}\r\n            onChange={handleChange}\r\n          >\r\n            <FormControlLabel\r\n              value=\"erc20\"\r\n              control={<Radio />}\r\n              label=\"ERC20, Standard Token\"\r\n              labelPlacement=\"end\"\r\n            />\r\n            <FormControlLabel\r\n              value=\"erc721\"\r\n              control={<Radio />}\r\n              label=\"ERC721 non-fungible tokens(NFTs)\"\r\n              labelPlacement=\"end\"\r\n            />\r\n          </RadioGroup>\r\n        </Grid>\r\n      </Grid>\r\n      {/* <Grid container spacing={2}>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"firstName\"\r\n            name=\"firstName\"\r\n            label=\"First name\"\r\n            fullWidth\r\n            autoComplete=\"given-name\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"lastName\"\r\n            name=\"lastName\"\r\n            label=\"Last name\"\r\n            fullWidth\r\n            autoComplete=\"family-name\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            required\r\n            id=\"address1\"\r\n            name=\"address1\"\r\n            label=\"Address line 1\"\r\n            fullWidth\r\n            autoComplete=\"shipping address-line1\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TextField\r\n            id=\"address2\"\r\n            name=\"address2\"\r\n            label=\"Address line 2\"\r\n            fullWidth\r\n            autoComplete=\"shipping address-line2\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"city\"\r\n            name=\"city\"\r\n            label=\"City\"\r\n            fullWidth\r\n            autoComplete=\"shipping address-level2\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            id=\"state\"\r\n            name=\"state\"\r\n            label=\"State/Province/Region\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"zip\"\r\n            name=\"zip\"\r\n            label=\"Zip / Postal code\"\r\n            fullWidth\r\n            autoComplete=\"shipping postal-code\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            id=\"country\"\r\n            name=\"country\"\r\n            label=\"Country\"\r\n            fullWidth\r\n            autoComplete=\"shipping country\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox color=\"secondary\" name=\"saveAddress\" value=\"yes\" />\r\n            }\r\n            label=\"Use this address for payment details\"\r\n          />\r\n        </Grid>\r\n      </Grid> */}\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\Attributes.js",["144","145","146"],"import React, { useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Tooltip, { tooltipClasses } from \"@mui/material/Tooltip\";\r\nimport { styled } from \"@mui/material/styles\";\r\n\r\nexport default function Attributes(props) {\r\n  const LightTooltip = styled(({ className, ...props }) => (\r\n    <Tooltip {...props} classes={{ popper: className }} />\r\n  ))(({ theme }) => ({\r\n    [`& .${tooltipClasses.tooltip}`]: {\r\n      backgroundColor: theme.palette.common.white,\r\n      color: \"rgba(0, 0, 0, 0.87)\",\r\n      boxShadow: theme.shadows[1],\r\n      fontSize: 11,\r\n    },\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      {props.tknType === \"erc20\" ? (\r\n        <Erc20look {...props} />\r\n      ) : (\r\n        <Erc721look {...props} />\r\n      )}\r\n\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <FormControlLabel\r\n            control={\r\n              <Checkbox\r\n                color=\"primary\"\r\n                checked={props.whiteListChecked}\r\n                onChange={(e) => props.setwhiteListChecked(e.target.checked)}\r\n              />\r\n            }\r\n            label=\"Enable whitelist\"\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            Closed Group Token, You specifiy who can participate in the token\r\n          </label>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n\r\n  //   // if (props.tknType === \"erc20\") return <Erc20look {...props} />;\r\n  //   // else return <Erc721look {...props} />;\r\n}\r\nconst Erc721look = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Name the following\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            required\r\n            id=\"tknName\"\r\n            label=\"Token Name\"\r\n            fullWidth\r\n            value={props.tknName}\r\n            onChange={(e) => {\r\n              props.settknName(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            The name of the token. 3-25 symbols. Alphanumerical characters,\r\n            space, and hyphen are accepted.\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            required\r\n            id=\"tknSym\"\r\n            label=\"Token Symbol\"\r\n            fullWidth\r\n            value={props.tknSym}\r\n            onChange={(e) => {\r\n              props.settknSym(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            2-10 characters (example ETH, BTC, BAT, etc.). No spaces. Only\r\n            alphanumerical characters.\r\n          </label>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nconst Erc20look = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Name the following\r\n      </Typography>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            required\r\n            id=\"tknName\"\r\n            label=\"Token Name\"\r\n            fullWidth\r\n            value={props.tknName}\r\n            onChange={(e) => {\r\n              props.settknName(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            The name of the token. 3-25 symbols. Alphanumerical characters,\r\n            space, and hyphen are accepted.\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            required\r\n            id=\"tknSym\"\r\n            label=\"Token Symbol\"\r\n            fullWidth\r\n            value={props.tknSym}\r\n            onChange={(e) => {\r\n              props.settknSym(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            2-10 characters (example ETH, BTC, BAT, etc.). No spaces. Only\r\n            alphanumerical characters.\r\n          </label>\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <TextField\r\n            required\r\n            id=\"tknSup\"\r\n            label=\"Token Total Suply\"\r\n            fullWidth\r\n            value={props.tknSup}\r\n            onChange={(e) => {\r\n              props.settknSup(e.target.value);\r\n            }}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <label>\r\n            Total amount of tokens to be generated. Minimum value is 1, and\r\n            maximum 1000000000000000.\r\n          </label>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n};\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\services\\deploy.js",[],"D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\Confirmation.js",["147"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listItem: {\r\n    padding: theme.spacing(1, 0),\r\n  },\r\n  total: {\r\n    fontWeight: 700,\r\n  },\r\n  title: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function Confirmation(props) {\r\n  const classes = useStyles();\r\n\r\n  console.log(props.tkninfo);\r\n  let tknType = undefined;\r\n  props.tkninfo.forEach((element) => {\r\n    if (element.name === \"Token Type\") tknType = element.value;\r\n  });\r\n  let tkninfo = props.tkninfo;\r\n  if (tknType === \"erc721\") {\r\n    tkninfo = tkninfo.filter((elm) =>\r\n      elm.name === \"Inital Supply\" ? false : true\r\n    );\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Typography variant=\"h6\" gutterBottom>\r\n        Token Summary\r\n      </Typography>\r\n      <List disablePadding>\r\n        {tkninfo.map((info) => (\r\n          <ListItem className={classes.listItem} key={info.name}>\r\n            <ListItemText primary={info.name} />\r\n            <Typography variant=\"body2\">{info.value.toString()}</Typography>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </React.Fragment>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\TerminalDisplayer.js",["148","149","150","151"],"import fetchStream from \"fetch-readablestream\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { ReactTerminal, ReactThemes } from \"react-terminal-component\";\r\nimport { EmulatorState, OutputFactory, Outputs } from \"javascript-terminal\";\r\n\r\nfunction NewlineText(props) {\r\n  const text = props.text;\r\n  return text.split(\"\\n\").map((str) => <p>{str}</p>);\r\n}\r\n\r\nexport default function TerminalDisplayer(props) {\r\n  // Terminal Setup\r\n  const defaultState = EmulatorState.createEmpty();\r\n  const defaultOutputs = defaultState.getOutputs();\r\n\r\n  const newOutputs = Outputs.addRecord(\r\n    defaultOutputs,\r\n    OutputFactory.makeTextOutput(props.terminalDisplay)\r\n  );\r\n  const emulatorState = defaultState.setOutputs(newOutputs);\r\n\r\n  useEffect(() => {\r\n    function readAllChunks(readableStream) {\r\n      if (readableStream) {\r\n        const reader = readableStream.getReader();\r\n        const chunks = [];\r\n\r\n        function pump() {\r\n          return reader.read().then(({ value, done }) => {\r\n            if (done) {\r\n              console.log(\"done chunks\");\r\n              return chunks;\r\n            }\r\n            const strValue = new TextDecoder().decode(value);\r\n            console.log(\"reading more\", strValue);\r\n            props.setterminalDisplay(\r\n              (prevState) => prevState + \"\\n\" + strValue\r\n            );\r\n\r\n            chunks.push(value);\r\n            return pump();\r\n          });\r\n        }\r\n\r\n        return pump();\r\n      }\r\n    }\r\n    try {\r\n      readAllChunks(props.terminalStream);\r\n      console.log(\"Getting the Data\");\r\n    } catch {}\r\n  }, [props.terminalStream]);\r\n\r\n  return (\r\n    <>\r\n      {/* <h5>Terminal</h5> */}\r\n      {/* <span>{props.terminalDisplay}</span> */}\r\n      {/* <NewlineText text={props.terminalDisplay} /> */}\r\n      <ReactTerminal\r\n        emulatorState={emulatorState}\r\n        acceptInput={false}\r\n        theme={{ ...ReactThemes.sea, height: \"100%\", with: \"100%\" }}\r\n      />\r\n    </>\r\n  );\r\n}\r\n","D:\\Dr.Wael's Internship\\Internship\\EthereumTokenGenerator\\FrontEnd\\src\\components\\FullScreenDialog.js",["152","153","154","155"],"import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport List from \"@material-ui/core/List\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Slide from \"@material-ui/core/Slide\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  appBar: {\r\n    position: \"relative\",\r\n  },\r\n  title: {\r\n    marginLeft: theme.spacing(2),\r\n    flex: 1,\r\n  },\r\n}));\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function FullScreenDialog(props) {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\r\n        {props.openBtnText}\r\n      </Button>\r\n      <Dialog\r\n        fullScreen\r\n        open={open}\r\n        onClose={handleClose}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <AppBar className={classes.appBar}>\r\n          <Toolbar>\r\n            <IconButton\r\n              edge=\"start\"\r\n              color=\"inherit\"\r\n              onClick={handleClose}\r\n              aria-label=\"close\"\r\n            >\r\n              <CloseIcon />\r\n            </IconButton>\r\n            <Typography variant=\"h6\" className={classes.title}>\r\n              {props.title}\r\n            </Typography>\r\n            {/* <Button autoFocus color=\"inherit\" onClick={handleClose}>\r\n              save\r\n            </Button> */}\r\n          </Toolbar>\r\n        </AppBar>\r\n        {props.children}\r\n        {/* <List>\r\n          <ListItem button>\r\n            <ListItemText primary=\"Phone ringtone\" secondary=\"Titania\" />\r\n          </ListItem>\r\n          <Divider />\r\n          <ListItem button>\r\n            <ListItemText\r\n              primary=\"Default notification ringtone\"\r\n              secondary=\"Tethys\"\r\n            />\r\n          </ListItem>\r\n        </List> */}\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"156","severity":1,"message":"157","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":13},{"ruleId":"156","severity":1,"message":"160","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":19},{"ruleId":"156","severity":1,"message":"161","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":14},{"ruleId":"156","severity":1,"message":"162","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":15},{"ruleId":"156","severity":1,"message":"163","line":12,"column":8,"nodeType":"158","messageId":"159","endLine":12,"endColumn":12},{"ruleId":"156","severity":1,"message":"164","line":13,"column":8,"nodeType":"158","messageId":"159","endLine":13,"endColumn":12},{"ruleId":"156","severity":1,"message":"165","line":16,"column":10,"nodeType":"158","messageId":"159","endLine":16,"endColumn":23},{"ruleId":"156","severity":1,"message":"166","line":16,"column":25,"nodeType":"158","messageId":"159","endLine":16,"endColumn":33},{"ruleId":"156","severity":1,"message":"167","line":16,"column":35,"nodeType":"158","messageId":"159","endLine":16,"endColumn":41},{"ruleId":"156","severity":1,"message":"168","line":16,"column":43,"nodeType":"158","messageId":"159","endLine":16,"endColumn":48},{"ruleId":"156","severity":1,"message":"169","line":78,"column":9,"nodeType":"158","messageId":"159","endLine":78,"endColumn":17},{"ruleId":"156","severity":1,"message":"170","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":24},{"ruleId":"156","severity":1,"message":"171","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":16},{"ruleId":"156","severity":1,"message":"172","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":18},{"ruleId":"156","severity":1,"message":"173","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":13},{"ruleId":"156","severity":1,"message":"174","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":18},{"ruleId":"156","severity":1,"message":"175","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":19},{"ruleId":"156","severity":1,"message":"176","line":11,"column":8,"nodeType":"158","messageId":"159","endLine":11,"endColumn":17},{"ruleId":"156","severity":1,"message":"177","line":14,"column":10,"nodeType":"158","messageId":"159","endLine":14,"endColumn":14},{"ruleId":"156","severity":1,"message":"178","line":22,"column":8,"nodeType":"158","messageId":"159","endLine":22,"endColumn":11},{"ruleId":"179","severity":1,"message":"180","line":86,"column":26,"nodeType":"181","messageId":"182","endLine":86,"endColumn":28},{"ruleId":"179","severity":1,"message":"180","line":89,"column":20,"nodeType":"181","messageId":"182","endLine":89,"endColumn":22},{"ruleId":"183","severity":1,"message":"184","line":90,"column":6,"nodeType":"185","endLine":90,"endColumn":24,"suggestions":"186"},{"ruleId":"156","severity":1,"message":"187","line":95,"column":11,"nodeType":"158","messageId":"159","endLine":95,"endColumn":15},{"ruleId":"179","severity":1,"message":"180","line":122,"column":21,"nodeType":"181","messageId":"182","endLine":122,"endColumn":23},{"ruleId":"183","severity":1,"message":"188","line":207,"column":6,"nodeType":"185","endLine":207,"endColumn":8,"suggestions":"189"},{"ruleId":"156","severity":1,"message":"190","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":12},{"ruleId":"156","severity":1,"message":"165","line":16,"column":10,"nodeType":"158","messageId":"159","endLine":16,"endColumn":23},{"ruleId":"156","severity":1,"message":"166","line":16,"column":25,"nodeType":"158","messageId":"159","endLine":16,"endColumn":33},{"ruleId":"156","severity":1,"message":"167","line":16,"column":35,"nodeType":"158","messageId":"159","endLine":16,"endColumn":41},{"ruleId":"156","severity":1,"message":"168","line":16,"column":43,"nodeType":"158","messageId":"159","endLine":16,"endColumn":48},{"ruleId":"156","severity":1,"message":"191","line":1,"column":10,"nodeType":"158","messageId":"159","endLine":1,"endColumn":18},{"ruleId":"156","severity":1,"message":"177","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":12},{"ruleId":"156","severity":1,"message":"192","line":11,"column":8,"nodeType":"158","messageId":"159","endLine":11,"endColumn":13},{"ruleId":"156","severity":1,"message":"160","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":19},{"ruleId":"156","severity":1,"message":"161","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":14},{"ruleId":"156","severity":1,"message":"162","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":15},{"ruleId":"156","severity":1,"message":"177","line":12,"column":8,"nodeType":"158","messageId":"159","endLine":12,"endColumn":12},{"ruleId":"156","severity":1,"message":"193","line":17,"column":8,"nodeType":"158","messageId":"159","endLine":17,"endColumn":14},{"ruleId":"156","severity":1,"message":"190","line":22,"column":8,"nodeType":"158","messageId":"159","endLine":22,"endColumn":12},{"ruleId":"156","severity":1,"message":"194","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":17},{"ruleId":"156","severity":1,"message":"170","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":24},{"ruleId":"156","severity":1,"message":"171","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":16},{"ruleId":"156","severity":1,"message":"172","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":18},{"ruleId":"156","severity":1,"message":"173","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":13},{"ruleId":"156","severity":1,"message":"174","line":9,"column":8,"nodeType":"158","messageId":"159","endLine":9,"endColumn":18},{"ruleId":"156","severity":1,"message":"175","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":19},{"ruleId":"156","severity":1,"message":"176","line":11,"column":8,"nodeType":"158","messageId":"159","endLine":11,"endColumn":17},{"ruleId":"156","severity":1,"message":"177","line":14,"column":10,"nodeType":"158","messageId":"159","endLine":14,"endColumn":14},{"ruleId":"156","severity":1,"message":"195","line":18,"column":9,"nodeType":"158","messageId":"159","endLine":18,"endColumn":20},{"ruleId":"156","severity":1,"message":"194","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":17},{"ruleId":"156","severity":1,"message":"171","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":16},{"ruleId":"156","severity":1,"message":"172","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":18},{"ruleId":"156","severity":1,"message":"175","line":10,"column":8,"nodeType":"158","messageId":"159","endLine":10,"endColumn":19},{"ruleId":"156","severity":1,"message":"176","line":11,"column":8,"nodeType":"158","messageId":"159","endLine":11,"endColumn":17},{"ruleId":"156","severity":1,"message":"191","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":25},{"ruleId":"156","severity":1,"message":"196","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":14},{"ruleId":"156","severity":1,"message":"197","line":12,"column":9,"nodeType":"158","messageId":"159","endLine":12,"endColumn":21},{"ruleId":"156","severity":1,"message":"190","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":12},{"ruleId":"156","severity":1,"message":"198","line":1,"column":8,"nodeType":"158","messageId":"159","endLine":1,"endColumn":19},{"ruleId":"156","severity":1,"message":"191","line":2,"column":21,"nodeType":"158","messageId":"159","endLine":2,"endColumn":29},{"ruleId":"156","severity":1,"message":"199","line":6,"column":10,"nodeType":"158","messageId":"159","endLine":6,"endColumn":21},{"ruleId":"183","severity":1,"message":"200","line":52,"column":6,"nodeType":"185","endLine":52,"endColumn":28,"suggestions":"201"},{"ruleId":"156","severity":1,"message":"202","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":20},{"ruleId":"156","severity":1,"message":"203","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":16},{"ruleId":"156","severity":1,"message":"204","line":7,"column":8,"nodeType":"158","messageId":"159","endLine":7,"endColumn":12},{"ruleId":"156","severity":1,"message":"205","line":8,"column":8,"nodeType":"158","messageId":"159","endLine":8,"endColumn":15},"no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'CssBaseline' is defined but never used.","'AppBar' is defined but never used.","'Toolbar' is defined but never used.","'http' is defined but never used.","'Test' is defined but never used.","'BrowserRouter' is defined but never used.","'Redirect' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'mnemonic' is assigned a value but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'InputLabel' is defined but never used.","'Radio' is defined but never used.","'RadioGroup' is defined but never used.","'FormControl' is defined but never used.","'FormLabel' is defined but never used.","'Link' is defined but never used.","'Box' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'callMethod' and 'props.method'. Either include them or remove the dependency array.","ArrayExpression",["206"],"'data' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'blockTimeStamp'. Either include it or remove the dependency array.",["207"],"'Grid' is defined but never used.","'useState' is defined but never used.","'Paper' is defined but never used.","'deploy' is defined but never used.","'TextField' is defined but never used.","'handleClick' is assigned a value but never used.","'Button' is defined but never used.","'LightTooltip' is assigned a value but never used.","'fetchStream' is defined but never used.","'NewlineText' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["208"],"'ListItemText' is defined but never used.","'ListItem' is defined but never used.","'List' is defined but never used.","'Divider' is defined but never used.",{"desc":"209","fix":"210"},{"desc":"211","fix":"212"},{"desc":"213","fix":"214"},"Update the dependencies array to be: [callMethod, props.method, props.showDialog]",{"range":"215","text":"216"},"Update the dependencies array to be: [blockTimeStamp]",{"range":"217","text":"218"},"Update the dependencies array to be: [props, props.terminalStream]",{"range":"219","text":"220"},[3068,3086],"[callMethod, props.method, props.showDialog]",[6187,6189],"[blockTimeStamp]",[1589,1611],"[props, props.terminalStream]"]